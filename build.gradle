buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.4.0.RELEASE")
        classpath 'com.github.jengelman.gradle.plugins:gradle-processes:0.3.0'
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.3'
    }
}


plugins {
    id "com.moowork.grunt" version "1.1.1"
    id 'net.researchgate.release' version '2.4.1'
    id "com.jfrog.bintray" version "1.7"
}

apply plugin: 'java'
apply plugin: "spring-boot"
apply plugin: "io.spring.dependency-management"
apply plugin: 'com.moowork.grunt'
apply plugin: 'idea'

apply from: 'build-quality.gradle'
apply from: 'build-docker.gradle'
apply from: 'release-service.gradle'


ext {
    staticsInputDir = "${project.projectDir}/src/main/resources/public"
    staticsOutputDir = "${project.buildDir}/resources/main/public"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Camden.SR4"

    }
}
repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

description = 'EPAM Report portal. UI Service'

dependencies {
//    compile 'org.springframework.cloud:spring-cloud-starter-config'
    /* required for spring-retry and pooling for config from registry-service */
    compile("org.springframework.retry:spring-retry")
    compile "org.aspectj:aspectjweaver:${aspectjVersion}"

    compile 'org.springframework.cloud:spring-cloud-starter-eureka'
    compile 'org.springframework.cloud:spring-cloud-starter-consul-discovery'
    compile 'org.springframework.boot:spring-boot-starter-actuator'

    compile 'io.springfox:springfox-swagger-ui:2.3.0'


}

jar {
    baseName "service-ui"
}

sourcesJar{
    exclude '**/public/compiled'
    exclude '**/public/node_modules'
}

grunt {
    workDir = file("${staticsInputDir}")
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.0'
}

node {
    version = '4.4.3'
    npmVersion = '2.15.1'
    download = true
    nodeModulesDir = file("${staticsInputDir}")
}

grunt_jst {
    inputs.file "${staticsInputDir}/templates"
    outputs.file "${staticsOutputDir}/templates/compiled/templates.js"
}
grunt_build {
    inputs.file "${staticsInputDir}"
    outputs.file "${staticsOutputDir}"
}

task runJsTests(type: NodeTask) {
    script = project.file("${staticsInputDir}/node_modules/karma/bin/karma")
    args = ['start', project.file("${staticsInputDir}/karma.conf.js").absolutePath, '--single-run']
}

idea {
    module {
        //and some extra dirs that should be excluded by IDEAn
        excludeDirs += [file("${staticsInputDir}/node_modules"), file("${staticsInputDir}/compiled")];

    }
}

processResources {
    exclude "**/public/*"
    filesMatching('**/application*.yaml') {
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [version: project.property("version")])
    }
}

// The run task added by the application plugin
// is also of type JavaExec.
tasks.withType(JavaExec) {
    // Assign all Java system properties from
    // the command line to the JavaExec task.
    systemProperties System.properties
}



    //commented next 2 lines to skip tests
    //TODO Fix tests
//processResources.dependsOn runJsTests
//runJsTests.dependsOn grunt_build
    //and add 1 line instead
processResources.dependsOn grunt_build

grunt_build.dependsOn grunt_jst
grunt_jst.dependsOn npmInstall
